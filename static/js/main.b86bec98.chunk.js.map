{"version":3,"sources":["components/Button/index.jsx","components/Display/index.jsx","components/Clear/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","_ref","val","handleClick","handleKeyDown","value","label","react_default","a","createElement","className","concat","isNaN","onClick","onKeyUp","e","key","data-value","Display","input","Clear","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyDownHandler","Number","includes","handleClear","handleEqual","setState","handleInput","addToDisplay","state","startsWith","substr","endsWith","lastOpertorIndex","length","replace","mathJs","eval","toString","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b86bec98.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.scss\";\n\nconst isOperator = val => !isNaN(val) || val === \".\" || val === \"=\";\n\nexport default ({ handleClick, handleKeyDown, value, label }) => (\n  <button\n    className={`button ${isOperator(label) ? null : \"operator\"}`}\n    onClick={() => handleClick(value)}\n    onKeyUp={e => handleKeyDown(e.key)}\n    data-value={value}\n  >\n    {label}\n  </button>\n);\n","import React from \"react\";\nimport \"./styles.scss\";\n\nexport default ({ input }) => <div className=\"display\">{input}</div>;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nexport default ({ handleClick, label, value }) => (\n  <button className=\"clear-btn\" onClick={() => handleClick(value)}>\n    {label}\n  </button>\n);\n","import React, { Component } from \"react\";\nimport Button from \"./components/Button\";\nimport Display from \"./components/Display\";\nimport Clear from \"./components/Clear\";\nimport mathJs from \"mathjs\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\"\n    };\n  }\n\n  onKeyDownHandler = key => {\n    if (\n      Number(key) ||\n      [\"-\", \"+\", \"*\", \"/\", \".\", \"Backspace\", \"Enter\", \"=\"].includes(key)\n    ) {\n      if (key === \"Backspace\") {\n        this.handleClear();\n      } else if (key === \"Enter\" || key === \"=\") {\n        this.handleEqual();\n      } else {\n        this.setState(this.handleInput(key));\n      }\n    }\n  };\n\n  addToDisplay = val => {\n    switch (val) {\n      case \"clear\":\n        this.setState({ input: \"\" });\n        break;\n      case \"equal\":\n        this.handleEqual();\n        break;\n      default:\n        this.setState(this.handleInput(val));\n        break;\n    }\n  };\n\n  handleInput = val => {\n    const { input } = this.state;\n    if (\n      input.startsWith(\"+\") ||\n      input.startsWith(\"-\") ||\n      input.startsWith(\"*\") ||\n      input.startsWith(\"/\")\n    ) {\n      const input = (this.state.input + val).substr(1);\n      return { input };\n    } else if (\n      (input.endsWith(\"+\") ||\n        input.endsWith(\"-\") ||\n        input.endsWith(\"*\") ||\n        input.endsWith(\".\") ||\n        input.endsWith(\"/\")) &&\n      [\"-\", \"+\", \"*\", \"/\", \".\"].includes(val)\n    ) {\n      const lastOpertorIndex = this.state.input[this.state.input.length - 1];\n      const input = this.state.input.replace(lastOpertorIndex, val);\n      return { input };\n    } else {\n      const input = this.state.input + val;\n      return { input };\n    }\n  };\n\n  handleEqual = () => {\n    const { input } = this.state;\n\n    if (\n      input.endsWith(\"+\") ||\n      input.endsWith(\"-\") ||\n      input.endsWith(\"*\") ||\n      input.endsWith(\"/\")\n    ) {\n      this.setState({ input: \"0\" });\n    } else if (\n      (input.endsWith(\"0\") && input[input.length - 2] === \"/\") ||\n      (input.startsWith(\"0\") && input[1] === \"/\")\n    ) {\n      this.setState({ input: \"Can't divide by 0\" });\n    } else {\n      const input = mathJs.eval(this.state.input) || 0;\n      this.setState({ input: input.toString() });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <Display input={this.state.input} />\n          <div className=\"row\">\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"7\"\n              value=\"7\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"8\"\n              value=\"8\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"9\"\n              value=\"9\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"/\"\n              value=\"/\"\n            />\n          </div>\n          <div className=\"row\">\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"4\"\n              value=\"4\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"5\"\n              value=\"5\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"6\"\n              value=\"6\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"X\"\n              value=\"*\"\n            />\n          </div>\n          <div className=\"row\">\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"1\"\n              value=\"1\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"2\"\n              value=\"2\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"3\"\n              value=\"3\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"+\"\n              value=\"+\"\n            />\n          </div>\n          <div className=\"row\">\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\".\"\n              value=\".\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"0\"\n              value=\"0\"\n            />\n            <Button\n              handleClick={this.handleEqual}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"=\"\n              value=\"equal\"\n            />\n            <Button\n              handleClick={this.addToDisplay}\n              handleKeyDown={this.onKeyDownHandler}\n              label=\"-\"\n              value=\"-\"\n            />\n          </div>\n          <div className=\"row\">\n            <Clear handleClick={this.addToDisplay} label=\"Clear\" value=\"clear\">\n              Clear\n            </Clear>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}